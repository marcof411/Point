#BlueJ class context
comment0.params=
comment0.target=void\ checkAnimationSettings()
comment0.text=\r\n\ Called\ when\ DrawingPanel\ class\ loads\ up.\r\n\ Checks\ whether\ the\ user\ wants\ to\ save\ an\ animation\ to\ a\ file.\r\n
comment1.params=name\ value\ min\ max
comment1.target=void\ ensureInRange(java.lang.String,\ int,\ int,\ int)
comment1.text=\r\n\ Helper\ that\ throws\ an\ IllegalArgumentException\ if\ the\ given\ integer\r\n\ is\ not\ between\ the\ given\ min-max\ inclusive\r\n
comment10.params=
comment10.target=boolean\ isAntiAliasDefault()
comment10.text=\r\n\ Returns\ true\ if\ DrawingPanel\ instances\ should\ anti-alias\ (smooth)\ their\ graphics.\r\n\ By\ default\ this\ is\ true,\ but\ it\ can\ be\ set\ to\ false\ using\ the\ ANTIALIAS_PROPERTY.\r\n\ @return\ true\ if\ anti-aliasing\ is\ enabled\ (default\ true)\r\n
comment100.params=width
comment100.target=void\ setWidth(int)
comment100.text=\r\n\ Sets\ the\ drawing\ panel's\ width\ in\ pixels\ to\ the\ given\ value.\r\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\r\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\r\n\ @param\ width\ width,\ in\ pixels\r\n\ @throws\ IllegalArgumentException\ if\ height\ is\ negative\ or\ exceeds\ MAX_SIZE\r\n
comment101.params=
comment101.target=boolean\ shouldDiff()
comment101.text=\r\n\ Returns\ whether\ the\ user\ wants\ to\ perform\ a\ 'diff'\ comparison\ of\ their\r\n\ drawing\ panel\ with\ a\ given\ expected\ output\ image.\r\n
comment102.params=
comment102.target=boolean\ shouldSave()
comment102.text=\r\n\ Returns\ whether\ the\ user\ wants\ to\ save\ the\ drawing\ panel\ contents\ to\r\n\ a\ file\ automatically.\r\n
comment103.params=parent\ title\ message\ names
comment103.target=int\ showOptionDialog(java.awt.Frame,\ java.lang.String,\ java.lang.String,\ java.lang.String[])
comment103.text=\r\n\ Shows\ a\ dialog\ box\ with\ the\ given\ choices;\r\n\ returns\ the\ index\ chosen\ (-1\ \=\=\ canceled).\r\n
comment104.params=e
comment104.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment105.params=e
comment105.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment106.params=millis
comment106.target=void\ sleep(int)
comment106.text=\r\n\ Causes\ the\ program\ to\ pause\ for\ the\ given\ amount\ of\ time\ in\ milliseconds.\r\n\ This\ allows\ for\ animation\ by\ calling\ pause\ in\ a\ loop.\r\n\ If\ the\ DrawingPanel\ is\ not\ showing\ on\ the\ screen,\ has\ no\ effect.\r\n\ @param\ millis\ number\ of\ milliseconds\ to\ sleep\r\n\ @throws\ IllegalArgumentException\ if\ a\ negative\ number\ of\ ms\ is\ passed\r\n
comment107.params=
comment107.target=void\ toFront()
comment107.text=\r\n\ Moves\ the\ drawing\ panel\ window\ on\ top\ of\ other\ windows\ so\ it\ can\ be\ seen.\r\n
comment108.params=window
comment108.target=void\ toFront(java.awt.Window)
comment108.text=\r\n\ Brings\ the\ given\ window\ to\ the\ front\ of\ the\ Z-ordering.\r\n
comment109.params=
comment109.target=void\ run()
comment11.params=
comment11.target=boolean\ isHeadless()
comment11.text=\r\n\ Returns\ true\ if\ the\ class\ is\ in\ "headless"\ mode,\ meaning\ that\ it\ is\ running\ on\r\n\ a\ server\ without\ a\ graphical\ user\ interface.\r\n\ @return\ true\ if\ we\ are\ in\ headless\ mode\ (default\ false)\r\n
comment110.params=zoomFactor
comment110.target=void\ zoom(int)
comment110.text=\r\n\ Zooms\ the\ drawing\ panel\ in/out\ to\ the\ given\ factor.\r\n\ A\ zoom\ factor\ of\ 1,\ the\ default,\ indicates\ normal\ size.\r\n\ A\ zoom\ factor\ of\ 2\ would\ indicate\ 200%\ size,\ and\ so\ on.\r\n\ The\ factor\ value\ passed\ should\ be\ at\ least\ 1;\ if\ not,\ 1\ will\ be\ used.\r\n\ @param\ zoomFactor\ the\ zoom\ factor\ to\ use\ (1\ or\ greater)\r\n
comment111.params=s\ os
comment111.target=void\ putAscii(java.lang.String,\ java.io.OutputStream)
comment111.text=\r\n\ Internal\ method;\r\n\ write\ just\ the\ low\ bytes\ of\ a\ String.\ (This\ sucks,\ but\ the\ concept\ of\ an\r\n\ encoding\ seems\ inapplicable\ to\ a\ binary\ file\ ID\ string.\ I\ would\ think\r\n\ flexibility\ is\ just\ what\ we\ don't\ want\ -\ but\ then\ again,\ maybe\ I'm\ slow.)\r\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\r\n
comment112.params=i16\ os
comment112.target=void\ putShort(int,\ java.io.OutputStream)
comment112.text=\r\n\ Internal\ method;\r\n\ write\ a\ 16-bit\ integer\ in\ little\ endian\ byte\ order.\r\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\r\n
comment12.params=
comment12.target=boolean\ mainIsActive()
comment12.text=\r\n\ Internal\ method;\ returns\ whether\ the\ 'main'\ thread\ is\ still\ running.\r\n\ Used\ to\ determine\ whether\ to\ exit\ the\ program\ when\ the\ drawing\ panel\r\n\ is\ closed\ by\ the\ user.\r\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\r\n\ @return\ true\ if\ main\ thread\ is\ still\ running\r\n
comment13.params=name
comment13.target=boolean\ propertyIsTrue(java.lang.String)
comment13.text=\r\n\ Returns\ whether\ the\ given\ Java\ system\ property\ has\ been\ set\ to\ a\r\n\ "truthy"\ value\ such\ as\ "yes"\ or\ "true"\ or\ "1".\ \r\n
comment14.params=
comment14.target=void\ saveAll()
comment14.text=\r\n\ Saves\ every\ DrawingPanel\ instance\ that\ is\ active.\r\n\ @throws\ IOException\ if\ unable\ to\ save\ any\ of\ the\ files.\r\n
comment15.params=value
comment15.target=void\ setAntiAliasDefault(java.lang.Boolean)
comment15.text=\r\n\ Sets\ whether\ DrawingPanel\ instances\ should\ anti-alias\ (smooth)\ their\ pixels\ by\ default.\r\n\ Default\ true.\ \ You\ can\ set\ this\ on\ a\ given\ DrawingPanel\ instance\ with\ setAntialias(boolean).\r\n\ @param\ value\ whether\ to\ enable\ anti-aliasing\ (default\ true)\r\n
comment16.params=value
comment16.target=void\ setHeadless(java.lang.Boolean)
comment16.text=\r\n\ Sets\ the\ class\ to\ run\ in\ "headless"\ mode,\ with\ no\ graphical\ output\ on\ screen.\r\n\ @param\ value\ whether\ to\ enable\ headless\ mode\ (default\ false)\r\n
comment17.params=file
comment17.target=void\ setSaveFile(java.io.File)
comment17.text=\r\n\ Sets\ the\ file\ to\ be\ used\ when\ saving\ graphical\ output\ for\ all\ DrawingPanels.\r\n\ @param\ file\ the\ file\ to\ use\ as\ default\ save\ file\r\n
comment18.params=filename
comment18.target=void\ setSaveFileName(java.lang.String)
comment18.text=\r\n\ Sets\ the\ filename\ to\ be\ used\ when\ saving\ graphical\ output\ for\ all\ DrawingPanels.\r\n\ @param\ filename\ the\ name/path\ of\ the\ file\ to\ use\ as\ default\ save\ file\r\n
comment19.params=r\ g\ b
comment19.target=int\ toRgbInteger(int,\ int,\ int)
comment19.text=\r\n\ Returns\ an\ RGB\ integer\ made\ from\ the\ given\ red,\ green,\ and\ blue\ components\r\n\ from\ 0-255.\ \ The\ returned\ integer\ is\ suitable\ for\ use\ with\ various\ RGB\r\n\ integer\ methods\ in\ this\ class\ such\ as\ setPixel.\r\n\ @param\ r\ red\ component\ from\ 0-255\ (bits\ 8-15)\r\n\ @param\ g\ green\ component\ from\ 0-255\ (bits\ 16-23)\r\n\ @param\ b\ blue\ component\ from\ 0-255\ (bits\ 24-31)\r\n\ @return\ RGB\ integer\ with\ full\ 255\ for\ alpha\ and\ r-g-b\ in\ bits\ 8-31\r\n\ @throws\ IllegalArgumentException\ if\ r,\ g,\ or\ b\ is\ not\ in\ 0-255\ range\r\n
comment2.params=name\ value
comment2.target=void\ ensureNotNull(java.lang.String,\ java.lang.Object)
comment2.text=\r\n\ Helper\ that\ throws\ a\ NullPointerException\ if\ the\ given\ value\ is\ null\ \r\n
comment20.params=alpha\ r\ g\ b
comment20.target=int\ toRgbInteger(int,\ int,\ int,\ int)
comment20.text=\r\n\ Returns\ an\ RGB\ integer\ made\ from\ the\ given\ alpha,\ red,\ green,\ and\ blue\ components\r\n\ from\ 0-255.\ \ The\ returned\ integer\ is\ suitable\ for\ use\ with\ various\ RGB\r\n\ integer\ methods\ in\ this\ class\ such\ as\ setPixel.\r\n\ @param\ alpha\ alpha\ (transparency)\ component\ from\ 0-255\ (bits\ 0-7)\r\n\ @param\ r\ red\ component\ from\ 0-255\ (bits\ 8-15)\r\n\ @param\ g\ green\ component\ from\ 0-255\ (bits\ 16-23)\r\n\ @param\ b\ blue\ component\ from\ 0-255\ (bits\ 24-31)\r\n\ @return\ RGB\ integer\ with\ the\ given\ four\ components\r\n\ @throws\ IllegalArgumentException\ if\ alpha,\ r,\ g,\ or\ b\ is\ not\ in\ 0-255\ range\r\n
comment21.params=
comment21.target=boolean\ usingDrJava()
comment21.text=\r\n\ Returns\ whether\ the\ current\ program\ is\ running\ in\ the\ DrJava\ editor.\r\n\ This\ was\ needed\ in\ the\ past\ because\ DrJava\ messed\ with\ some\ settings.\r\n
comment22.params=
comment22.target=DrawingPanel()
comment22.text=\r\n\ Constructs\ a\ drawing\ panel\ with\ a\ default\ width\ and\ height\ enclosed\ in\ a\ window.\r\n\ Uses\ DEFAULT_WIDTH\ and\ DEFAULT_HEIGHT\ for\ the\ panel's\ size.\r\n
comment23.params=width\ height
comment23.target=DrawingPanel(int,\ int)
comment23.text=\r\n\ Constructs\ a\ drawing\ panel\ of\ given\ width\ and\ height\ enclosed\ in\ a\ window.\r\n\ @param\ width\ panel's\ width\ in\ pixels\r\n\ @param\ height\ panel's\ height\ in\ pixels\r\n
comment24.params=
comment24.target=void\ run()
comment25.params=
comment25.target=void\ run()
comment26.params=imageFile
comment26.target=DrawingPanel(java.io.File)
comment26.text=\r\n\ Constructs\ a\ drawing\ panel\ that\ displays\ the\ image\ from\ the\ given\ file\ enclosed\ in\ a\ window.\r\n\ The\ panel\ will\ be\ sized\ exactly\ to\ fit\ the\ image\ inside\ it.\r\n\ @param\ imageFile\ the\ image\ file\ to\ load\r\n\ @throws\ RuntimeException\ if\ the\ image\ file\ is\ not\ found\r\n
comment27.params=imageFileName
comment27.target=DrawingPanel(java.lang.String)
comment27.text=\r\n\ Constructs\ a\ drawing\ panel\ that\ displays\ the\ image\ from\ the\ given\ file\ name\ enclosed\ in\ a\ window.\r\n\ The\ panel\ will\ be\ sized\ exactly\ to\ fit\ the\ image\ inside\ it.\r\n\ @param\ imageFileName\ the\ file\ name/path\ of\ the\ image\ file\ to\ load\r\n\ @throws\ RuntimeException\ if\ the\ image\ file\ is\ not\ found\r\n
comment28.params=listener
comment28.target=void\ addKeyListener(java.awt.event.KeyListener)
comment28.text=\r\n\ Adds\ the\ given\ event\ listener\ to\ respond\ to\ key\ events\ on\ this\ panel.\r\n\ @param\ listener\ the\ key\ event\ listener\ to\ attach\r\n
comment29.params=listener
comment29.target=void\ addMouseListener(java.awt.event.MouseListener)
comment29.text=\r\n\ Adds\ the\ given\ event\ listener\ to\ respond\ to\ mouse\ events\ on\ this\ panel.\r\n\ @param\ listener\ the\ mouse\ event\ listener\ to\ attach\r\n
comment3.params=rgb
comment3.target=int\ getAlpha(int)
comment3.text=\r\n\ Returns\ the\ alpha\ (opacity)\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\r\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\r\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\r\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\r\n\ @return\ alpha\ component\ from\ 0-255\r\n
comment30.params=
comment30.target=boolean\ autoEnableAnimationOnSleep()
comment30.text=\r\n\ Whether\ the\ panel\ should\ automatically\ switch\ to\ animated\ mode\r\n\ if\ it\ calls\ the\ sleep\ method.\r\n
comment31.params=frame
comment31.target=void\ center(java.awt.Window)
comment31.text=\r\n\ Moves\ the\ given\ JFrame\ to\ the\ center\ of\ the\ screen.\r\n
comment32.params=
comment32.target=void\ checkChooser()
comment32.text=\r\n\ Constructs\ and\ initializes\ our\ JFileChooser\ field\ if\ necessary.\r\n
comment33.params=
comment33.target=void\ clear()
comment33.text=\r\n\ Erases\ all\ drawn\ shapes/lines/colors\ from\ the\ panel.\r\n
comment34.params=
comment34.target=void\ compareToFile()
comment34.text=\r\n\ Compares\ the\ current\ DrawingPanel\ image\ to\ an\ image\ file\ on\ disk.\r\n
comment35.params=
comment35.target=void\ compareToURL()
comment35.text=\r\n\ Compares\ the\ current\ DrawingPanel\ image\ to\ an\ image\ file\ on\ the\ web.\r\n
comment36.params=
comment36.target=void\ exit()
comment36.text=\r\n\ Closes\ the\ DrawingPanel\ and\ exits\ the\ program.\r\n
comment37.params=
comment37.target=java.lang.String\ getCallingClassName()
comment37.text=\r\n\ Returns\ a\ best\ guess\ about\ the\ name\ of\ the\ class\ that\ constructed\ this\ panel.\r\n
comment38.params=
comment38.target=java.util.Map\ getCounts()
comment38.text=\r\n\ Returns\ a\ map\ of\ counts\ of\ occurrences\ of\ calls\ of\ various\ drawing\ methods.\r\n\ You\ can\ print\ this\ map\ to\ see\ how\ many\ times\ your\ graphics\ methods\ have\r\n\ been\ called\ to\ aid\ in\ debugging.\r\n\ @return\ map\ of\ {method\ name,\ count}\ pairs\r\n
comment39.params=
comment39.target=java.awt.Graphics\ getDebuggingGraphics()
comment39.text=\r\n\ A\ variation\ of\ getGraphics\ that\ returns\ an\ object\ that\ records\r\n\ a\ count\ for\ various\ drawing\ methods.\r\n\ See\ also\:\ getCounts\r\n\ @return\ debug\ Graphics\ object\r\n
comment4.params=rgb
comment4.target=int\ getBlue(int)
comment4.text=\r\n\ Returns\ the\ blue\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\r\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\r\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\r\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\r\n\ @return\ blue\ component\ from\ 0-255\r\n
comment40.params=
comment40.target=java.awt.Graphics2D\ getGraphics()
comment40.text=\r\n\ Obtain\ the\ Graphics\ object\ to\ draw\ on\ the\ panel.\r\n\ @return\ panel's\ Graphics\ object\r\n
comment41.params=
comment41.target=java.awt.image.BufferedImage\ getImage()
comment41.text=\r\n\ Creates\ the\ buffered\ image\ for\ drawing\ on\ this\ panel.\r\n
comment42.params=
comment42.target=int\ getHeight()
comment42.text=\r\n\ Returns\ the\ drawing\ panel's\ height\ in\ pixels.\r\n\ @return\ drawing\ panel's\ height\ in\ pixels\r\n
comment43.params=x\ y
comment43.target=java.awt.Color\ getPixel(int,\ int)
comment43.text=\r\n\ Returns\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ as\ a\ Color\ object.\r\n\ If\ nothing\ has\ been\ explicitly\ drawn\ on\ this\ particular\ pixel,\ the\ panel's\r\n\ background\ color\ is\ returned.\r\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ retrieve\r\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ retrieve\r\n\ @return\ pixel\ (x,\ y)\ color\ as\ a\ Color\ object\r\n\ @throws\ IllegalArgumentException\ if\ (x,\ y)\ is\ out\ of\ range\r\n
comment44.params=x\ y
comment44.target=int\ getPixelRGB(int,\ int)
comment44.text=\r\n\ Returns\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ as\ an\ RGB\ integer.\r\n\ The\ individual\ red,\ green,\ and\ blue\ components\ of\ the\ RGB\ integer\ can\ be\r\n\ extracted\ from\ this\ by\ calling\ DrawingPanel.getRed,\ getGreen,\ and\ getBlue.\r\n\ If\ nothing\ has\ been\ explicitly\ drawn\ on\ this\ particular\ pixel,\ the\ panel's\r\n\ background\ color\ is\ returned.\r\n\ See\ also\:\ getPixel.\r\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ retrieve\r\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ retrieve\r\n\ @return\ pixel\ (x,\ y)\ color\ as\ an\ RGB\ integer\r\n\ @throws\ IllegalArgumentException\ if\ (x,\ y)\ is\ out\ of\ range\r\n
comment45.params=
comment45.target=java.awt.Color[][]\ getPixels()
comment45.text=\r\n\ Returns\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ as\ a\ 2-D\ array\r\n\ of\ Color\ objects.\r\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\r\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\r\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\r\n\ @return\ 2D\ array\ of\ colors\ (row-major)\r\n
comment46.params=
comment46.target=int[][]\ getPixelsRGB()
comment46.text=\r\n\ Returns\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ as\ a\ 2-D\ array\r\n\ of\ RGB\ integers.\r\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\r\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\r\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\r\n\ The\ individual\ red,\ green,\ and\ blue\ components\ of\ each\ RGB\ integer\ can\ be\r\n\ extracted\ from\ this\ by\ calling\ DrawingPanel.getRed,\ getGreen,\ and\ getBlue.\r\n\ @return\ 2D\ array\ of\ RGB\ integers\ (row-major)\r\n
comment47.params=
comment47.target=java.awt.Dimension\ getSize()
comment47.text=\r\n\ Returns\ the\ drawing\ panel's\ pixel\ size\ (width,\ height)\ as\ a\ Dimension\ object.\r\n\ @return\ panel's\ size\r\n
comment48.params=
comment48.target=int\ getWidth()
comment48.text=\r\n\ Returns\ the\ drawing\ panel's\ width\ in\ pixels.\r\n\ @return\ panel's\ width\r\n
comment49.params=
comment49.target=int\ getX()
comment49.text=\r\n\ Returns\ the\ drawing\ panel's\ x-coordinate\ on\ the\ screen.\r\n\ @return\ panel's\ x-coordinate\r\n
comment5.params=rgb
comment5.target=int\ getGreen(int)
comment5.text=\r\n\ Returns\ the\ green\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\r\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\r\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\r\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\r\n\ @return\ green\ component\ from\ 0-255\r\n
comment50.params=
comment50.target=int\ getY()
comment50.text=\r\n\ Returns\ the\ drawing\ panel's\ y-coordinate\ on\ the\ screen.\r\n\ @return\ panel's\ y-coordinate\r\n
comment51.params=
comment51.target=int\ getZoom()
comment51.text=\r\n\ Returns\ the\ drawing\ panel's\ current\ zoom\ factor.\r\n\ Initially\ this\ is\ 1\ to\ indicate\ 100%\ zoom,\ the\ original\ size.\r\n\ A\ factor\ of\ 2\ would\ indicate\ 200%\ zoom,\ and\ so\ on.\r\n\ @return\ zoom\ factor\ (default\ 1)\r\n
comment52.params=img\ infoflags\ x\ y\ width\ height
comment52.target=boolean\ imageUpdate(java.awt.Image,\ int,\ int,\ int,\ int,\ int)
comment52.text=\r\n\ Internal\ method;\r\n\ notifies\ the\ panel\ when\ images\ are\ loaded\ and\ updated.\r\n\ This\ is\ a\ required\ method\ of\ ImageObserver\ interface.\r\n\ This\ is\ an\ internal\ method\ not\ meant\ to\ be\ called\ by\ clients.\r\n\ @param\ img\ internal\ method;\ do\ not\ call\r\n\ @param\ infoflags\ internal\ method;\ do\ not\ call\r\n\ @param\ x\ internal\ method;\ do\ not\ call\r\n\ @param\ y\ internal\ method;\ do\ not\ call\r\n\ @param\ width\ internal\ method;\ do\ not\ call\r\n\ @param\ height\ internal\ method;\ do\ not\ call\r\n
comment53.params=
comment53.target=void\ initializeAnimation()
comment53.text=\r\n\ Sets\ up\ state\ for\ drawing\ and\ saving\ frames\ of\ animation\ to\ a\ GIF\ image.\r\n
comment54.params=
comment54.target=boolean\ isAnimated()
comment54.text=\r\n\ Returns\ whether\ this\ drawing\ panel\ is\ in\ animation\ mode.\r\n
comment55.params=
comment55.target=boolean\ isGraphical()
comment55.text=\r\n\ Returns\ whether\ this\ drawing\ panel\ is\ going\ to\ be\ displayed\ on\ screen.\r\n\ This\ is\ almost\ always\ true\ except\ in\ some\ server\ environments\ where\r\n\ the\ DrawingPanel\ is\ run\ 'headless'\ without\ a\ GUI,\ often\ for\ scripting\r\n\ and\ automation\ purposes.\r\n
comment56.params=
comment56.target=boolean\ isMultiple()
comment56.text=\r\n\ Returns\ true\ if\ the\ drawing\ panel\ class\ is\ in\ multiple\ mode.\r\n\ This\ would\ be\ true\ if\ the\ current\ program\ pops\ up\ several\ drawing\ panels\r\n\ and\ we\ want\ to\ save\ the\ state\ of\ each\ of\ them\ to\ a\ different\ file.\r\n
comment57.params=file
comment57.target=java.awt.Image\ loadImage(java.io.File)
comment57.text=\r\n\ Loads\ an\ image\ from\ the\ given\ file\ on\ disk\ and\ returns\ it\r\n\ as\ an\ Image\ object.\r\n\ @param\ file\ the\ file\ to\ load\r\n\ @return\ loaded\ image\ object\r\n\ @throws\ NullPointerException\ if\ filename\ is\ null\r\n\ @throws\ RuntimeException\ if\ the\ given\ file\ is\ not\ found\r\n
comment58.params=filename
comment58.target=java.awt.Image\ loadImage(java.lang.String)
comment58.text=\r\n\ Loads\ an\ image\ from\ the\ given\ file\ on\ disk\ and\ returns\ it\r\n\ as\ an\ Image\ object.\r\n\ @param\ filename\ name/path\ of\ the\ file\ to\ load\r\n\ @return\ loaded\ image\ object\r\n\ @throws\ NullPointerException\ if\ filename\ is\ null\r\n\ @throws\ RuntimeException\ if\ the\ given\ file\ is\ not\ found\r\n
comment59.params=e
comment59.target=void\ onClick(DrawingPanel.DPMouseEventHandler)
comment59.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ clicks.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ click\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment6.params=rgb
comment6.target=int\ getRed(int)
comment6.text=\r\n\ Returns\ the\ red\ component\ of\ the\ given\ RGB\ pixel\ from\ 0-255.\r\n\ Often\ used\ in\ conjunction\ with\ the\ methods\ getPixelRGB,\ setPixelRGB,\ etc.\r\n\ @param\ rgb\ RGB\ integer\ with\ alpha\ in\ bits\ 0-7,\ red\ in\ bits\ 8-15,\ green\ in\r\n\ bits\ 16-23,\ and\ blue\ in\ bits\ 24-31\r\n\ @return\ red\ component\ from\ 0-255\r\n
comment60.params=e
comment60.target=void\ onDrag(DrawingPanel.DPMouseEventHandler)
comment60.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ drags.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ drag\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment61.params=e
comment61.target=void\ onEnter(DrawingPanel.DPMouseEventHandler)
comment61.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ enters.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ enter\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment62.params=e
comment62.target=void\ onExit(DrawingPanel.DPMouseEventHandler)
comment62.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ exits.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ exit\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment63.params=e
comment63.target=void\ onKeyDown(DrawingPanel.DPKeyEventHandler)
comment63.text=\r\n\ Adds\ an\ event\ handler\ for\ key\ presses.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ key\ press\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment64.params=e
comment64.target=void\ onKeyUp(DrawingPanel.DPKeyEventHandler)
comment64.text=\r\n\ Adds\ an\ event\ handler\ for\ key\ releases.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ key\ release\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment65.params=e
comment65.target=void\ onMouseClick(DrawingPanel.DPMouseEventHandler)
comment65.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ clicks.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ click\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment66.params=e
comment66.target=void\ onMouseDown(DrawingPanel.DPMouseEventHandler)
comment66.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ button\ down\ events.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ button\ down\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment67.params=e
comment67.target=void\ onMouseDrag(DrawingPanel.DPMouseEventHandler)
comment67.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ drags.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ drag\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment68.params=e
comment68.target=void\ onMouseEnter(DrawingPanel.DPMouseEventHandler)
comment68.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ enters.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ enter\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment69.params=e
comment69.target=void\ onMouseExit(DrawingPanel.DPMouseEventHandler)
comment69.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ exits.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ exit\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment7.params=name
comment7.target=java.lang.Boolean\ getPropertyBoolean(java.lang.String)
comment7.text=\r\n\ Returns\ the\ given\ Java\ system\ property\ as\ a\ Boolean.\r\n\ Note\ uppercase-B\ meaning\ that\ if\ the\ property\ isn't\ set,\ this\ will\ return\ null.\r\n\ That\ also\ means\ that\ if\ you\ call\ it\ and\ try\ to\ store\ as\ lowercase-B\ boolean\ and\r\n\ it's\ null,\ you\ will\ crash\ the\ program.\ \ You\ have\ been\ warned.\r\n
comment70.params=e
comment70.target=void\ onMouseMove(DrawingPanel.DPMouseEventHandler)
comment70.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ movement.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ move\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment71.params=e
comment71.target=void\ onMouseUp(DrawingPanel.DPMouseEventHandler)
comment71.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ button\ up\ events.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ button\ up\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment72.params=e
comment72.target=void\ onMove(DrawingPanel.DPMouseEventHandler)
comment72.text=\r\n\ Adds\ an\ event\ handler\ for\ mouse\ movement.\r\n\ You\ can\ pass\ a\ lambda\ function\ here\ to\ be\ called\ when\ a\ mouse\ move\ event\ occurs.\r\n\ @param\ e\ event\ handler\ function\ to\ call\r\n\ @throws\ NullPointerException\ if\ event\ handler\ is\ null\r\n
comment73.params=
comment73.target=boolean\ readyToClose()
comment73.text=\r\n\ Returns\ whether\ the\ drawing\ panel\ should\ be\ closed\ and\ the\ program\r\n\ should\ be\ shut\ down.\r\n
comment74.params=image\ oldColor\ newColor
comment74.target=void\ replaceColor(java.awt.image.BufferedImage,\ java.awt.Color,\ java.awt.Color)
comment74.text=\r\n\ Replaces\ all\ occurrences\ of\ the\ given\ old\ color\ with\ the\ given\ new\ color.\r\n
comment75.params=file
comment75.target=void\ save(java.io.File)
comment75.text=\r\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\r\n\ the\ given\ file.\r\n\ @param\ file\ the\ file\ to\ save\r\n\ @throws\ NullPointerException\ if\ filename\ is\ null\r\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\r\n
comment76.params=filename
comment76.target=void\ save(java.lang.String)
comment76.text=\r\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\r\n\ the\ given\ file.\r\n\ @param\ filename\ name/path\ of\ the\ file\ to\ save\r\n\ @throws\ NullPointerException\ if\ filename\ is\ null\r\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\r\n
comment77.params=file
comment77.target=void\ saveAnimated(java.io.File)
comment77.text=\r\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\r\n\ the\ given\ file.\r\n\ @param\ file\ the\ file\ to\ save\r\n\ @throws\ NullPointerException\ if\ filename\ is\ null\r\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\r\n
comment78.params=filename
comment78.target=void\ saveAnimated(java.lang.String)
comment78.text=\r\n\ Takes\ the\ current\ contents\ of\ the\ drawing\ panel\ and\ writes\ them\ to\r\n\ the\ given\ file.\r\n\ @param\ filename\ name/path\ of\ the\ file\ to\ save\r\n\ @throws\ NullPointerException\ if\ filename\ is\ null\r\n\ @throws\ IOException\ if\ the\ given\ file\ cannot\ be\ written\r\n
comment79.params=
comment79.target=void\ saveAs()
comment79.text=\r\n\ Called\ when\ the\ user\ presses\ the\ "Save\ As"\ menu\ item.\r\n\ Pops\ up\ a\ file\ chooser\ prompting\ the\ user\ to\ save\ their\ panel\ to\ an\ image.\r\n
comment8.params=
comment8.target=java.lang.String\ getSaveFileName()
comment8.text=\r\n\ Returns\ the\ file\ name\ used\ for\ saving\ all\ DrawingPanel\ instances.\r\n\ By\ default\ this\ is\ null,\ but\ it\ can\ be\ set\ using\ setSaveFileName\r\n\ or\ by\ setting\ the\ SAVE_PROPERTY\ env\ variable.\r\n\ @return\ the\ shared\ save\ file\ name\r\n
comment80.params=
comment80.target=void\ saveAsAnimated()
comment80.text=\r\n\ Called\ when\ the\ user\ presses\ the\ "Save\ As"\ menu\ item\ on\ an\ animated\ panel.\r\n\ Pops\ up\ a\ file\ chooser\ prompting\ the\ user\ to\ save\ their\ panel\ to\ an\ image.\r\n
comment81.params=extension
comment81.target=java.lang.String\ saveAsHelper(java.lang.String)
comment81.text=\r\n\ A\ helper\ method\ to\ facilitate\ the\ Save\ As\ action\ for\ both\ animated\r\n\ and\ non-animated\ images.\r\n
comment82.params=
comment82.target=java.lang.String\ saveToTempFile()
comment82.text=\r\n\ Saves\ the\ drawing\ panel's\ image\ to\ a\ temporary\ file\ and\ returns\r\n\ that\ file's\ name.\r\n
comment83.params=alwaysOnTop
comment83.target=void\ setAlwaysOnTop(boolean)
comment83.text=\r\n\ Sets\ whether\ the\ panel\ will\ always\ cover\ other\ windows\ (default\ false).\r\n\ @param\ alwaysOnTop\ true\ if\ the\ panel\ should\ always\ cover\ other\ windows\r\n
comment84.params=antiAlias
comment84.target=void\ setAntiAlias(boolean)
comment84.text=\r\n\ Sets\ whether\ the\ panel\ should\ use\ anti-aliased\ /\ smoothed\ graphics\ (default\ true).\r\n\ @param\ antiAlias\ true\ if\ the\ panel\ should\ be\ smoothed\r\n
comment85.params=c
comment85.target=void\ setBackground(java.awt.Color)
comment85.text=\r\n\ Sets\ the\ background\ color\ of\ the\ drawing\ panel\ to\ be\ the\ given\ color.\r\n\ @param\ c\ color\ to\ use\ as\ background\r\n\ @throws\ NullPointerException\ if\ color\ is\ null\r\n
comment86.params=rgb
comment86.target=void\ setBackground(int)
comment86.text=\r\n\ Sets\ the\ background\ color\ of\ the\ drawing\ panel\ to\ be\ the\ color\r\n\ represented\ by\ the\ given\ RGB\ integer.\r\n\ @param\ rgb\ RGB\ integer\ to\ use\ as\ background\ color\ (full\ alpha\ assumed/applied)\r\n
comment87.params=gridLines
comment87.target=void\ setGridLines(boolean)
comment87.text=\r\n\ Enables\ or\ disables\ the\ drawing\ of\ grid\ lines\ on\ top\ of\ the\ image\ to\ help\r\n\ with\ debugging\ sizes\ and\ coordinates.\r\n\ By\ default\ the\ grid\ lines\ will\ be\ shown\ every\ 10\ pixels\ in\ each\ dimension.\r\n\ @param\ gridLines\ whether\ to\ show\ grid\ lines\ (true)\ or\ not\ (false)\r\n
comment88.params=gridLines\ pxGap
comment88.target=void\ setGridLines(boolean,\ int)
comment88.text=\r\n\ Enables\ or\ disables\ the\ drawing\ of\ grid\ lines\ on\ top\ of\ the\ image\ to\ help\r\n\ with\ debugging\ sizes\ and\ coordinates.\r\n\ The\ grid\ lines\ will\ be\ shown\ every\ pxGap\ pixels\ in\ each\ dimension.\r\n\ @param\ gridLines\ whether\ to\ show\ grid\ lines\ (true)\ or\ not\ (false)\r\n\ @param\ pxGap\ number\ of\ pixels\ between\ grid\ lines\r\n
comment89.params=height
comment89.target=void\ setHeight(int)
comment89.text=\r\n\ Sets\ the\ drawing\ panel's\ height\ in\ pixels\ to\ the\ given\ value.\r\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\r\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\r\n\ @param\ height\ height,\ in\ pixels\r\n\ @throws\ IllegalArgumentException\ if\ height\ is\ negative\ or\ exceeds\ MAX_SIZE\r\n
comment9.params=name
comment9.target=boolean\ hasProperty(java.lang.String)
comment9.text=\r\n\ Returns\ whether\ the\ given\ Java\ system\ property\ has\ been\ set.\r\n
comment90.params=x\ y\ color
comment90.target=void\ setPixel(int,\ int,\ java.awt.Color)
comment90.text=\r\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ given\ color.\r\n\ If\ the\ color\ is\ null,\ the\ call\ has\ no\ effect.\r\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ set\r\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ set\r\n\ @param\ color\ Color\ to\ set\ the\ pixel\ to\ use\r\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ out\ of\ bounds\r\n\ @throws\ NullPointerException\ if\ color\ is\ null\r\n
comment91.params=x\ y\ rgb
comment91.target=void\ setPixel(int,\ int,\ int)
comment91.text=\r\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ color\r\n\ represented\ by\ the\ given\ RGB\ integer.\r\n\ The\ passed\ RGB\ integer's\ alpha\ value\ is\ ignored\ and\ a\ full\ alpha\ of\ 255\r\n\ is\ always\ used\ here,\ to\ avoid\ common\ bugs\ with\ using\ a\ 0\ value\ for\ alpha.\r\n\ See\ also\:\ setPixel.\r\n\ See\ also\:\ setPixelRGB.\r\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ set\r\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ set\r\n\ @param\ rgb\ RGB\ integer\ representing\ the\ color\ to\ set\ the\ pixel\ to\ use\r\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ out\ of\ bounds\r\n
comment92.params=x\ y\ rgb
comment92.target=void\ setPixelRGB(int,\ int,\ int)
comment92.text=\r\n\ Sets\ the\ color\ of\ the\ pixel\ at\ the\ given\ x/y\ coordinate\ to\ be\ the\ color\r\n\ represented\ by\ the\ given\ RGB\ integer.\r\n\ The\ passed\ RGB\ integer's\ alpha\ value\ is\ ignored\ and\ a\ full\ alpha\ of\ 255\r\n\ is\ always\ used\ here,\ to\ avoid\ common\ bugs\ with\ using\ a\ 0\ value\ for\ alpha.\r\n\ See\ also\:\ setPixel.\r\n\ @param\ x\ x-coordinate\ of\ pixel\ to\ set\r\n\ @param\ y\ y-coordinate\ of\ pixel\ to\ set\r\n\ @param\ rgb\ RGB\ integer\ representing\ the\ color\ to\ set\ the\ pixel\ to\ use\r\n\ @throws\ IllegalArgumentException\ if\ x\ or\ y\ is\ out\ of\ bounds\r\n
comment93.params=pixels
comment93.target=void\ setPixels(java.awt.Color[][])
comment93.text=\r\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\r\n\ in\ the\ given\ 2-D\ array\ of\ Color\ objects.\r\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\r\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\r\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\r\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\r\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\r\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\r\n\ If\ any\ rows\ or\ colors\ in\ the\ array\ are\ null,\ those\ pixels\ will\ be\ ignored.\r\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\r\n\ @param\ pixels\ 2D\ array\ of\ pixels\ (row-major)\r\n\ @throws\ NullPointerException\ if\ pixels\ array\ is\ null\r\n
comment94.params=pixels
comment94.target=void\ setPixels(int[][])
comment94.text=\r\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\r\n\ represented\ by\ the\ given\ 2-D\ array\ of\ RGB\ integers.\r\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\r\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\r\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\r\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\r\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\r\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\r\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\r\n\ @param\ pixels\ 2D\ array\ of\ pixels\ (row-major)\r\n\ @throws\ NullPointerException\ if\ pixels\ array\ is\ null\r\n
comment95.params=pixels
comment95.target=void\ setPixelsRGB(int[][])
comment95.text=\r\n\ Sets\ the\ colors\ of\ all\ pixels\ in\ this\ DrawingPanel\ to\ the\ colors\r\n\ represented\ by\ the\ given\ 2-D\ array\ of\ RGB\ integers.\r\n\ The\ first\ index\ of\ the\ array\ is\ the\ y-coordinate,\ and\ the\ second\ index\r\n\ is\ the\ x-coordinate.\ \ So,\ for\ example,\ index\ [r][c]\ represents\ the\ RGB\r\n\ pixel\ data\ for\ the\ pixel\ at\ position\ (x\=c,\ y\=r).\r\n\ If\ the\ given\ array's\ dimensions\ do\ not\ match\ the\ width/height\ of\ the\r\n\ drawing\ panel,\ the\ panel\ is\ resized\ to\ match\ the\ array.\r\n\ If\ the\ pixel\ array\ is\ null\ or\ size\ 0,\ the\ call\ has\ no\ effect.\r\n\ The\ 2-D\ array\ passed\ is\ assumed\ to\ be\ rectangular\ in\ length\ (not\ jagged).\r\n\ @param\ pixels\ 2D\ array\ of\ pixels\ (row-major)\r\n\ @throws\ NullPointerException\ if\ pixels\ array\ is\ null\r\n
comment96.params=width\ height
comment96.target=void\ setSize(int,\ int)
comment96.text=\r\n\ Sets\ the\ drawing\ panel's\ pixel\ size\ (width,\ height)\ to\ the\ given\ values.\r\n\ After\ calling\ this\ method,\ the\ client\ must\ call\ getGraphics()\ again\r\n\ to\ get\ the\ new\ graphics\ context\ of\ the\ newly\ enlarged\ image\ buffer.\r\n\ @param\ width\ width,\ in\ pixels\r\n\ @param\ height\ height,\ in\ pixels\r\n\ @throws\ IllegalArgumentException\ if\ width/height\ is\ negative\ or\ exceeds\ MAX_SIZE\r\n
comment97.params=text
comment97.target=void\ setStatusBarText(java.lang.String)
comment97.text=\r\n\ Sets\ the\ text\ that\ will\ appear\ in\ the\ drawing\ panel's\ bottom\ status\ bar.\r\n
comment98.params=
comment98.target=void\ setupMenuBar()
comment98.text=\r\n\ Initializes\ the\ drawing\ panel's\ menu\ bar\ items.\r\n
comment99.params=visible
comment99.target=void\ setVisible(boolean)
comment99.text=\r\n\ Show\ or\ hide\ the\ drawing\ panel\ on\ the\ screen.\r\n\ @param\ visible\ true\ to\ show,\ false\ to\ hide\r\n
numComments=113
